import unittest

from year_{{ year }}.day_{{ day_num }}_{{ task_name }}.solution import input_data, part_one, part_two

class TestDay{{ day_num }}(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        cls.example = input_data("year_{{ year }}/day_{{ day_num }}_{{ task_name }}/example.txt")
        cls.puzzle_input = input_data("year_{{ year }}/day_{{ day_num }}_{{ task_name }}/input.txt")

    def test_p1_example(self):
        """
        Tests Day {{ day_num }} Part 1 using the example given in the scenario
        """
        # self.assertEqual(part_one(self.__class__.example), 0)
        pass

    def test_p1_actual(self):
        """
        Tests the Day {{ day_num }} Part 1 using my generated input. Used to check any edits
        made to the program have not broken it.
        """
        # self.assertEqual(part_one(self.__class__.puzzle_input), 0)
        pass

    def test_p2_example(self):
        """
        Tests Day {{ day_num }} Part 2 using the example given in the scenario.
        """
        # self.assertEqual(part_two(self.__class__.example), 0)
        pass

    def test_p2_actual(self):
        """
        Tests the Day {{ day_num }} Part 2 using my generated input. Used to check any edits
        made to the program have not broken it.
        """
        # self.assertEqual(part_two(self.__class__.puzzle_input), 0)
        pass

if __name__ == '__main__':
    unittest.main()
